#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('legalese:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var slack = require('slack');

var privateKey  = fs.readFileSync('public/sslcert/mykey.pem', 'utf8');
var certificate = fs.readFileSync('public/sslcert/mycert.pem', 'utf8');
var credentials = {key: privateKey, cert: certificate};

var slacktoken = process.env.SLACKAPITOKEN

// slack.search.all({slacktoken, 'www'}, (err, data) => {
//     fs.writeFile('slackresponse.json', JSON.stringify(data), (err) => {
// 	if (err) throw err;
// 	console.log(data);
//     });
// });

// https.get('https://slack.com/api/search.all?' + slacktoken + '&query=www&pretty=1', (res) => {
//     // console.log('statusCode: ', res.statusCode);
//     // console.log('headers: ', res.headers);
//     // console.log(res);
//     res.on('data', function(d) {
//     	fs.writeFile('response.json', JSON.stringify(d));
//     	console.log(d);
//     });
// }).on('error', (e) => {
//     console.error(e);
// });

console.log(slacktoken);

var options = {
    hostname: 'slack.com',
    path: '/api/search.all?token=' + slacktoken + '&query=www&pretty=1'
};

var req = https.request(options, (res) => {
    // console.log('statusCode: ', res.statusCode);
    // console.log('headers: ', res.headers);
    res.on('data', (d) => {
	console.log(d.toString('utf-8'));
	fs.writeFile("response.json", d.toString('utf-8'));
    });
});
req.end();

req.on('error', (e) => {
    console.error(e);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// var server = http.createServer(function (req, res) {
//     res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
//     res.end();
// });

// var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// httpsServer.listen(8443);
// httpsServer.on('error', onError);
// httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
	// named pipe
	return val;
    }

    if (port >= 0) {
	// port number
	return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
	throw error;
    }

    var bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
	console.error(bind + ' requires elevated privileges');
	process.exit(1);
	break;
    case 'EADDRINUSE':
	console.error(bind + ' is already in use');
	process.exit(1);
	break;
    default:
	throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
    debug('Listening on ' + bind);
}
